[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Analytics Lab",
    "section": "",
    "text": "Hello!! My name is Çağrı Durmaz.\nThis is my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more.\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "",
    "text": "Welcome to my/our project page.\nKeep an eye on this space to stay updated with my project activities.\n(The titles below are provided as examples; please feel free to adjust them as necessary.)"
  },
  {
    "objectID": "project.html#data-source",
    "href": "project.html#data-source",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "2.1 Data Source",
    "text": "2.1 Data Source\nVeri seti, üniversitenin mezun bilgi sisteminden anonim olarak temin edilmiştir."
  },
  {
    "objectID": "project.html#general-information-about-data",
    "href": "project.html#general-information-about-data",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "2.2 General Information About Data",
    "text": "2.2 General Information About Data\nVeri kümesi, Hacettepe Üniversitesi Endüstri Mühendisliği bölümünden mezun yaklaşık 800 lisans öğrencisine ait şu bilgileri içermektedir: \n▪ GPA (Sayısal): Mezuniyet not ortalaması \n▪ Mezun olunan lise türü (Kategorik): Fen, Anadolu, özel lise vs. \n▪ Erasmus+ katılım durumu (Kategorik): Evet/Hayır \n▪ İşe başlama süresi (Sayısal): Mezuniyetten sonraki süre (ay olarak) \n▪ Çalışılan şirket (Kategorik) \n▪ İş pozisyonu (Kategorik) \n▪ Cinsiyet (Kategorik)"
  },
  {
    "objectID": "project.html#reason-of-choice",
    "href": "project.html#reason-of-choice",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "2.3 Reason of Choice",
    "text": "2.3 Reason of Choice\nBu proje, mezunların iş hayatına giriş süreçlerini anlamak, iş bulma süreleri ve tercih ettikleri kariyer yollarını değerlendirmek için seçilmiştir. Hacettepe Üniversitesi Endüstri Mühendisliği bölümü özelindeki mezun profilini anlamak, bölümü tercih edecek adaylara öngörüler sunmak ve gelecekteki mezunlara kariyer danışmanlığı sağlamak projenin temel amacıdır."
  },
  {
    "objectID": "project.html#preprocessing",
    "href": "project.html#preprocessing",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "2.4 Preprocessing",
    "text": "2.4 Preprocessing\nBu aşamada veri analizi öncesi gerçekleştirilen ön işleme adımları açıklanmıştır.\n\nGerekli kütüphanelerin yüklenmesi\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\n\nÖncesinde kod ile hazırlanan standartlaştırılmış rds dosyasının okunması\n\n\nanonim_temiz_veri_listesi &lt;- readRDS(\"/Users/cagridurmaz/Documents/GitHub/emu660-spring2025-cagridurmaz/islenmis_veri/anonim_temiz_veri_listesi.rds\")"
  },
  {
    "objectID": "project.html#exploratory-data-analysis",
    "href": "project.html#exploratory-data-analysis",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "3.1 Exploratory Data Analysis",
    "text": "3.1 Exploratory Data Analysis\nxxxxxx\n\n# --- Settings ---\n# Common student ID column name\nid_sutun_adi &lt;- \"fake_student_id\"\n\n# Data frame names\naffiliations_df_adi &lt;- \"affiliations\"\nusers_df_adi &lt;- \"users\"\n\n# Filter criteria for affiliations\ntarget_type &lt;- 2  # Change to \"2\" if type is a string\n\n# Gender column in users\ngender_sutun_adi &lt;- \"gender\"\n\n# --- Validation ---\n# Check if the main list exists and is a list\nif (!exists(\"anonim_temiz_veri_listesi\") || !is.list(anonim_temiz_veri_listesi)) {\n  stop(\"HATA: 'anonim_temiz_veri_listesi' objesi bulunamadı veya liste değil.\")\n}\n\n# Check if required data frames exist\nrequired_dfs &lt;- c(affiliations_df_adi, users_df_adi)\nmissing_dfs &lt;- setdiff(required_dfs, names(anonim_temiz_veri_listesi))\nif (length(missing_dfs) &gt; 0) {\n  stop(\"HATA: Şu DataFrame'ler listede bulunamadı: \", paste(missing_dfs, collapse=\", \"))\n}\n\naffiliations_df &lt;- anonim_temiz_veri_listesi[[affiliations_df_adi]]\nusers_df &lt;- anonim_temiz_veri_listesi[[users_df_adi]]\n\n# Check if required columns exist\nif (!all(c(id_sutun_adi, \"type\") %in% names(affiliations_df))) {\n  stop(\"HATA: '\", affiliations_df_adi, \"' içinde '\", id_sutun_adi, \"' veya 'type' sütunları eksik.\")\n}\nif (!all(c(id_sutun_adi, gender_sutun_adi) %in% names(users_df))) {\n  stop(\"HATA: '\", users_df_adi, \"' içinde '\", id_sutun_adi, \"' veya '\", gender_sutun_adi, \"' sütunları eksik.\")\n}\n\n\n# Filter affiliations and get unique student IDs\nfiltrelenmis_idler_df &lt;- affiliations_df %&gt;%\n  filter(type == target_type) %&gt;%\n  select(all_of(id_sutun_adi)) %&gt;%\n  distinct()\n\nfiltrelenmis_ogrenci_idler &lt;- filtrelenmis_idler_df[[id_sutun_adi]]\n\n# --- Step 1: Filter affiliations for type == 2 ---\ncat(\"Mezun Durumda Olan Öğrenci Sayısı:...\\n\")\n\nMezun Durumda Olan Öğrenci Sayısı:...\n\ncat(\"  &gt;\", length(filtrelenmis_ogrenci_idler), \"adet öğrenci bulundu.\\n\")\n\n  &gt; 743 adet öğrenci bulundu.\n\n# Stop if no students are found\nif (length(filtrelenmis_ogrenci_idler) == 0) {\n  stop(\"HATA: 'type' = 2 koşuluna uyan öğrenci bulunamadı.\")\n}\n\n\n# Filter users to get gender for matching student IDs\ngender_df &lt;- users_df %&gt;%\n  filter(.data[[id_sutun_adi]] %in% filtrelenmis_ogrenci_idler) %&gt;%\n  select(all_of(id_sutun_adi), all_of(gender_sutun_adi))\n\n# Check if any gender data was found\nif (nrow(gender_df) == 0) {\n  stop(\"HATA: Filtrelenmiş öğrenci ID'leri için cinsiyet verisi bulunamadı.\")\n}\n\n\n# Summarize gender counts and proportions\ngender_summary &lt;- gender_df %&gt;%\n  count(.data[[gender_sutun_adi]]) %&gt;%\n  mutate(\n    oran = n / sum(n),\n    yuzde = oran * 100,\n    etiket = sprintf(\"%.1f%%\", yuzde)\n  )\n\n# Rename gender column for clarity\ncolnames(gender_summary)[1] &lt;- \"Cinsiyet\"\n\n# Map gender values to Turkish (adjust if gender values differ)\ngender_summary &lt;- gender_summary %&gt;%\n  mutate(Cinsiyet = case_when(\n    Cinsiyet == \"female\" ~ \"Kadın\",\n    Cinsiyet == \"male\" ~ \"Erkek\",\n    TRUE ~ as.character(Cinsiyet)  # Keep other values as is\n  ))\n\n\n\n# Create bar plot\np &lt;- ggplot(gender_summary, aes(x = Cinsiyet, y = oran, fill = Cinsiyet)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = etiket), vjust = -0.5, size = 4) +\n  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +\n  labs(\n    title = \"Mezunların Cinsiyet Dağılımı\",\n    x = \"Cinsiyet\",\n    y = \"Oran\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 12),\n    legend.position = \"none\"  # Remove legend since x-axis labels are clear\n  )\n\n\n# Display the plot (optional, depending on environment)\nprint(p)\n\n\n\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# --- Settings ---\nid_sutun_adi      &lt;- \"fake_student_id\"\nworks_df_adi      &lt;- \"works\"\ncountry_sutun_adi &lt;- \"country\"\n\n# --- DataFrames ---\nworks_df      &lt;- anonim_temiz_veri_listesi[[works_df_adi]]\ncompanies_df  &lt;- anonim_temiz_veri_listesi[[\"companies\"]]\nindustries_df &lt;- anonim_temiz_veri_listesi[[\"industries\"]]\n\n# --- 1) Ülke sayısı ---\ncountry_df &lt;- works_df %&gt;%\n  select(all_of(id_sutun_adi), all_of(country_sutun_adi)) %&gt;%\n  distinct() %&gt;%\n  filter(!is.na(.data[[country_sutun_adi]]) & .data[[country_sutun_adi]] != \"\")\n\nunique_countries &lt;- n_distinct(country_df[[country_sutun_adi]])\n\n# --- 2) Endüstri sayısı ---\nindustry_df &lt;- works_df %&gt;%\n  select(all_of(id_sutun_adi), companyid) %&gt;%\n  distinct() %&gt;%\n  filter(!is.na(companyid) & companyid != \"\") %&gt;%\n  left_join(\n    companies_df %&gt;% select(id, industry),\n    by = c(\"companyid\" = \"id\")\n  ) %&gt;%\n  filter(!is.na(industry) & industry != \"\") %&gt;%\n  left_join(\n    industries_df %&gt;% select(id, industrytr),\n    by = c(\"industry\" = \"id\")\n  )\n\nunique_industries &lt;- n_distinct(industry_df$industry)\n\n# --- 3) Pozisyon sayısı ---\nposition_df &lt;- works_df %&gt;%\n  select(all_of(id_sutun_adi), positionid) %&gt;%\n  distinct() %&gt;%\n  filter(!is.na(positionid) & positionid != \"\")\n\nunique_positions &lt;- n_distinct(position_df$positionid)\n\n# --- 4) İşveren (company) sayısı ---\nemployer_df &lt;- works_df %&gt;%\n  select(companyid) %&gt;%\n  distinct() %&gt;%\n  filter(!is.na(companyid) & companyid != \"\")\n\nunique_employers &lt;- n_distinct(employer_df$companyid)\n\n# --- 5) Özet cümlesi ---\ncat(sprintf(\n  \"Öğrencilerimiz ve mezunlarımız %d ülke, %d endüstri, %d iş pozisyonu ve %d işverende çalışmış veya halen çalışmaktadır.\\n\",\n  unique_countries,\n  unique_industries,\n  unique_positions,\n  unique_employers\n))\n\nÖğrencilerimiz ve mezunlarımız 28 ülke, 89 endüstri, 540 iş pozisyonu ve 755 işverende çalışmış veya halen çalışmaktadır.\n\n\n\n# Load required packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(forcats)  # For reordering factors\n\n# --- Settings ---\n# Common student ID column name\nid_sutun_adi &lt;- \"fake_student_id\"\n\n# Data frame names\nworks_df_adi &lt;- \"works\"\ncompanies_df_adi &lt;- \"companies\"\n\n# Column names\ncompanyid_sutun_adi &lt;- \"companyid\"\ncompany_id_sutun_adi &lt;- \"id\"\nname_sutun_adi &lt;- \"name\"\n\n# Number of companies to display in the plot (to avoid clutter)\nmax_companies &lt;- 10\n\n# --- Validation ---\n# Check if the main list exists and is a list\nif (!exists(\"anonim_temiz_veri_listesi\") || !is.list(anonim_temiz_veri_listesi)) {\n  stop(\"HATA: 'anonim_temiz_veri_listesi' objesi bulunamadı veya liste değil.\")\n}\n\n# Check if required data frames exist\nrequired_dfs &lt;- c(works_df_adi, companies_df_adi)\nmissing_dfs &lt;- setdiff(required_dfs, names(anonim_temiz_veri_listesi))\nif (length(missing_dfs) &gt; 0) {\n  stop(\"HATA: Şu DataFrame'ler listede bulunamadı: \", paste(missing_dfs, collapse=\", \"))\n}\n\nworks_df &lt;- anonim_temiz_veri_listesi[[works_df_adi]]\ncompanies_df &lt;- anonim_temiz_veri_listesi[[companies_df_adi]]\n\n# Check if required columns exist\nrequired_columns_works &lt;- c(id_sutun_adi, companyid_sutun_adi)\nif (!all(required_columns_works %in% names(works_df))) {\n  missing_cols &lt;- setdiff(required_columns_works, names(works_df))\n  stop(\"HATA: '\", works_df_adi, \"' içinde şu sütunlar eksik: \", paste(missing_cols, collapse=\", \"))\n}\n\nrequired_columns_companies &lt;- c(company_id_sutun_adi, name_sutun_adi)\nif (!all(required_columns_companies %in% names(companies_df))) {\n  missing_cols &lt;- setdiff(required_columns_companies, names(companies_df))\n  stop(\"HATA: '\", companies_df_adi, \"' içinde şu sütunlar eksik: \", paste(missing_cols, collapse=\", \"))\n}\n\n\n# Deduplicate by fake_student_id and companyid\ncompany_df &lt;- works_df %&gt;%\n  select(all_of(id_sutun_adi), all_of(companyid_sutun_adi)) %&gt;%\n  distinct() %&gt;%\n  filter(!is.na(.data[[companyid_sutun_adi]]) & .data[[companyid_sutun_adi]] != \"\")  # Remove NA or empty companyid\n\n\n# Join with companies to get name\ncompany_df &lt;- company_df %&gt;%\n  left_join(\n    companies_df %&gt;% select(all_of(company_id_sutun_adi), all_of(name_sutun_adi)),\n    by = setNames(company_id_sutun_adi, companyid_sutun_adi)\n  )\n\n# Check for unmatched companyid values\nunmatched &lt;- company_df %&gt;% filter(is.na(.data[[name_sutun_adi]]))\nif (nrow(unmatched) &gt; 0) {\n  cat(\"  UYARI: \", nrow(unmatched), \" kayıt şirket ismi ile eşleşmedi. Örnek companyid değerleri:\\n\")\n  print(head(unmatched[[companyid_sutun_adi]], 5))\n}\n\n# Filter out NA or empty company names\ncompany_df &lt;- company_df %&gt;%\n  filter(!is.na(.data[[name_sutun_adi]]) & .data[[name_sutun_adi]] != \"\")\n\n# Stop if no valid company data\nif (nrow(company_df) == 0) {\n  cat(\"HATA: Geçerli şirket verisi bulunamadı.\\n\")\n  cat(\"  - Eşleşen kayıt sayısı: \", nrow(company_df) + nrow(unmatched), \"\\n\")\n  cat(\"  - NA veya boş şirket ismi sayısı: \", nrow(unmatched), \"\\n\")\n  cat(\"  - Örnek works$companyid değerleri:\\n\")\n  print(head(works_df[[companyid_sutun_adi]], 5))\n  cat(\"  - Örnek companies$id değerleri:\\n\")\n  print(head(companies_df[[company_id_sutun_adi]], 5))\n  stop(\"HATA: Analiz için yeterli veri yok.\")\n}\n\n\n# Count unique companies\nunique_companies &lt;- n_distinct(company_df[[name_sutun_adi]])\n\n# Stop if no valid company data\nif (unique_companies == 0) {\n  stop(\"HATA: Geçerli şirket verisi bulunamadı.\")\n}\n\n\n# Count employees per company\ncompany_summary &lt;- company_df %&gt;%\n  count(.data[[name_sutun_adi]]) %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(\n    oran = n / sum(n),\n    yuzde = oran * 100,\n    etiket = sprintf(\"%.1f%%\", yuzde),\n    # Reorder company names for plotting (based on n for consistency)\n    !!name_sutun_adi := fct_reorder(.data[[name_sutun_adi]], n)\n  )\n\n\n# Limit to top N companies for plotting\nplot_data &lt;- company_summary %&gt;%\n  slice_head(n = max_companies)\n\n# Create horizontal bar plot with percentages on x-axis\np &lt;- ggplot(plot_data, aes(y = .data[[name_sutun_adi]], x = yuzde, fill = .data[[name_sutun_adi]])) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = etiket), hjust = 0, size = 3.0, angle = 0) +  # Rotate percentage labels\n  scale_x_continuous(labels = scales::percent_format(scale = 1)) +  # Format x-axis as percentages\n  labs(\n    title = \"Mezunların Çalıştığı Şirketler\",\n    subtitle = sprintf(\"Toplam %d Farklı şirket (İlk %d şirket)\", unique_companies, nrow(plot_data)),\n    x = \"Çalışan Yüzdesi (%)\",\n    y = \"Şirket\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5, size = 12),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10),\n    axis.title = element_text(size = 12),\n    legend.position = \"none\"  # Remove legend since y-axis labels are clear\n  )\n\n\n# Display the plot (optional, depending on environment)\nprint(p)\n\n\n\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# 1) type = 2 veya 3 olan öğrencilerin ID'leri\naff_ids &lt;- anonim_temiz_veri_listesi[[\"affiliations\"]] %&gt;%\n  filter(type %in% c(2, 3)) %&gt;%\n  pull(fake_student_id)\n\n# 2) users tablosundan o ID'lerle highschool ID'si al\nusr_hs &lt;- anonim_temiz_veri_listesi[[\"users\"]] %&gt;%\n  filter(fake_student_id %in% aff_ids) %&gt;%\n  select(fake_student_id, highschool)\n\n# 3) highschool ID -&gt; il eşlemesi\nhs_prov &lt;- usr_hs %&gt;%\n  inner_join(\n    anonim_temiz_veri_listesi[[\"highschools\"]] %&gt;%\n      select(id, city),   # kendi sütun adınızla değiştirin\n    by = c(\"highschool\" = \"id\")\n  ) %&gt;%\n  rename(il = city)\n\n# 4) İllere göre say, oran ve etiket üret\nprov_dist &lt;- hs_prov %&gt;%\n  filter(!is.na(il) & il != \"\") %&gt;%\n  count(il) %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(\n    pct   = n / sum(n),\n    label = sprintf(\"%.1f%%\", pct * 100)\n  )\n\n# 5) **Sadece ilk 10 il**i seç\ntop10_prov &lt;- prov_dist %&gt;%\n  slice_max(order_by = n, n = 10)\n\nggplot(top10_prov, aes(\n      x = reorder(il, -n),    # &lt;- -n ile büyükten küçüğe doğru\n      y = n,\n      fill = il\n    )) +\n  geom_col(width = 0.7) +\n  geom_text(aes(label = label), vjust = -0.5, size = 3) +\n  labs(\n    title = \"En Çok Öğrenci/Mezun Gelen İlk 10 İl\",\n    x     = \"İl\",\n    y     = \"Kişi Sayısı\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position   = \"none\",\n    axis.text.x       = element_text(angle = 45, hjust = 1),\n    plot.title        = element_text(hjust = 0.5, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\n\n# 1) Veri setlerini al\nusers        &lt;- anonim_temiz_veri_listesi[[\"users\"]]\naffiliations &lt;- anonim_temiz_veri_listesi[[\"affiliations\"]]\nworks        &lt;- anonim_temiz_veri_listesi[[\"works\"]]\npositions    &lt;- anonim_temiz_veri_listesi[[\"positions\"]]\n\n# 2) Sadece mezunların ID'lerini (type == 2) al\ngrad_ids &lt;- affiliations %&gt;%\n  filter(type == 2) %&gt;%\n  pull(fake_student_id)\n\n# 3) works'u mezunlarla sınırlayıp, her mezunun ilk kaydını tut\nworks_grad &lt;- works %&gt;%\n  filter(fake_student_id %in% grad_ids,\n         !is.na(positionid) & positionid != \"\") %&gt;%\n  distinct(fake_student_id, .keep_all = TRUE)\n\n# 4) Pozisyon adlarını ekle\npos_dist &lt;- works_grad %&gt;%\n  inner_join(\n    positions %&gt;% select(id, position),\n    by = c(\"positionid\" = \"id\")\n  )\n\n# 5) Toplam pozisyon ve mezun sayısı\ntotal_positions &lt;- n_distinct(pos_dist$position)\ntotal_people    &lt;- n_distinct(pos_dist$fake_student_id)\nmessage(sprintf(\"Mezunlarımız %d farklı pozisyonda, toplam %d kişi çalışmaktadır.\",\n                total_positions, total_people))\n\nMezunlarımız 223 farklı pozisyonda, toplam 508 kişi çalışmaktadır.\n\n# 6) Pozisyon başına mezun sayısını ve oranını hesapla\npos_summary &lt;- pos_dist %&gt;%\n  count(position, name = \"n\") %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(\n    pct   = n / sum(n),\n    label = percent(pct, accuracy = 0.1)\n  )\n\n# 7) İlk 10 pozisyonu seç\ntop10_pos &lt;- pos_summary %&gt;% slice_max(order_by = n, n = 10)\n\n# 8) Yatay bar chart (en çoktan en aza)\nggplot(top10_pos, aes(\n      x = pct,\n      y = reorder(position, pct),\n      fill = position\n    )) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = label),\n            hjust = -0.1, size = 3) +\n  scale_x_continuous(\n    labels = percent_format(),\n    limits = c(0, max(top10_pos$pct) * 1.1)\n  ) +\n  labs(\n    title    = \"Mezunların En Çok Çalıştığı İlk 10 Pozisyon\",\n    subtitle = sprintf(\"Toplam %d pozisyon, %d mezun\", total_positions, total_people),\n    x        = \"Mezun Oranı\",\n    y        = \"Pozisyon\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position   = \"none\",\n    axis.text.y       = element_text(size = 10),\n    plot.title        = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle     = element_text(hjust = 0.5)\n  )\n\n\n\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# 1) affiliations içindeki cgpa’yı numeric'e çevir\naffiliations &lt;- anonim_temiz_veri_listesi[[\"affiliations\"]] %&gt;%\n  mutate(\n    cgpa = as.numeric(gsub(\",\", \".\", cgpa))\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `cgpa = as.numeric(gsub(\",\", \".\", cgpa))`.\nCaused by warning:\n! NAs introduced by coercion\n\n# 2) Erasmus’a giden mezunların ID’leri\ngrad_erasmus_ids &lt;- affiliations %&gt;%\n  filter(type == 2) %&gt;%\n  pull(fake_student_id) %&gt;%\n  intersect(\n    anonim_temiz_veri_listesi[[\"erasmus\"]] %&gt;% pull(fake_student_id)\n  )\n\n# 3) Sadece mezun + geçerli cgpa, birden fazla kayıt varsa tekilleştir\ngpa_df &lt;- affiliations %&gt;%\n  filter(type == 2, !is.na(cgpa)) %&gt;%\n  distinct(fake_student_id, cgpa) %&gt;%\n  mutate(\n    Grup = if_else(\n      fake_student_id %in% grad_erasmus_ids,\n      \"Erasmus\",\n      \"Non-Erasmus\"\n    )\n  )\n\n# 4) Medyan değerleri hazırla\nmedian_df &lt;- gpa_df %&gt;%\n  group_by(Grup) %&gt;%\n  summarize(medyan = median(cgpa, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(label = sprintf(\"%.2f\", medyan))\n\n# 5) Boxplot + jitter + medyan etiketleri\nggplot(gpa_df, aes(x = Grup, y = cgpa, fill = Grup)) +\n  geom_boxplot(outlier.shape = NA, alpha = 0.6) +\n  geom_jitter(width = 0.15, size = 1, alpha = 0.3, na.rm = TRUE) +\n  # Medyan etiketlerini beyaz zeminde, kutunun üstüne taşıyoruz\n  geom_label(\n    data = median_df,\n    aes(x = Grup, y = medyan, label = label),\n    nudge_y = 0.1,            # kutunun biraz üstüne\n    fill    = \"white\",        # okunurluk için\n    fontface = \"bold\",\n    size    = 4\n  ) +\n  coord_cartesian(\n    ylim = c(\n      min(gpa_df$cgpa, na.rm = TRUE),\n      max(gpa_df$cgpa, na.rm = TRUE) * 1.05\n    )\n  ) +\n  labs(\n    title = \"Mezunların CGPA Dağılımı\",\n    x     = NULL,\n    y     = \"CGPA\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"none\",\n    plot.title      = element_text(hjust = 0.5, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\n\n# ---- 1) Data hazırlığı ----\naffiliations &lt;- anonim_temiz_veri_listesi[[\"affiliations\"]]\nerasmus      &lt;- anonim_temiz_veri_listesi[[\"erasmus\"]]\nuniversities &lt;- anonim_temiz_veri_listesi[[\"universities\"]]\n\n# ---- 2) Affiliations türü 2 veya 3 olan öğrencilerin ID’leri ----\nvalid_ids &lt;- affiliations %&gt;%\n  filter(type %in% c(2, 3)) %&gt;%\n  pull(fake_student_id) %&gt;%\n  unique()\n\n# ---- 3) Bu öğrenciler arasından Erasmus’a gitmiş olanları seç ----\neras_valid &lt;- erasmus %&gt;%\n  filter(fake_student_id %in% valid_ids)\n\n# ---- 4) Her kaydı üniversite tablosuyla birleştirip ülke bilgisini al ----\neras_country &lt;- eras_valid %&gt;%\n  inner_join(\n    universities %&gt;% select(id, country),\n    by = c(\"universityid\" = \"id\")\n  ) %&gt;%\n  # eksik veya boş ülke adlarını at\n  filter(!is.na(country) & country != \"\") %&gt;%\n  # aynı öğrenci birden fazla kez sayılmasın\n  distinct(fake_student_id, country)\n\n# ---- 5) Ülke bazında öğrenci sayısını, sıralı hale getir ----\ncountry_counts &lt;- eras_country %&gt;%\n  count(country, name = \"n\") %&gt;%\n  arrange(desc(n))\n\ntotal_countries &lt;- n_distinct(country_counts$country)\ntotal_students  &lt;- n_distinct(eras_country$fake_student_id)\n\n# ---- 7) Yatay bar chart ile görselleştirme ----\nggplot(country_counts, aes(\n      x = n,\n      y = reorder(country, n),\n      fill = country\n    )) +\n  geom_col(show.legend = FALSE, width = 0.7) +\n  geom_text(aes(label = n), hjust = -0.1, size = 3) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, .1)),\n    labels = comma\n  ) +\n  labs(\n    title = \"Erasmus’a Gidilen Ülkelere Göre Öğrenci Sayısı\",\n    subtitle = sprintf(\"Toplam %d ülke, %d öğrenci\", total_countries, total_students),\n    x     = \"Öğrenci Sayısı\",\n    y     = \"Ülke\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    axis.text.y   = element_text(size = 10),\n    plot.title    = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    plot.margin   = margin(5, 20, 5, 5)\n  )\n\n\n\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\n\n# 1) Gerekli veri setlerini al\nworks              &lt;- anonim_temiz_veri_listesi[[\"works\"]]\nemployment_methods &lt;- anonim_temiz_veri_listesi[[\"employmentmethod\"]]\naffiliations       &lt;- anonim_temiz_veri_listesi[[\"affiliations\"]]\n\n# 2) Sadece type = 2 veya 3 (mezun + öğrenci) olan ID’ler\nvalid_ids &lt;- affiliations %&gt;%\n  filter(type %in% c(2, 3)) %&gt;%\n  pull(fake_student_id) %&gt;%\n  unique()\n\n# 3) Bu ID’lerle works’u filtrele ve her kişinin sadece ilk employmentmethod kaydını tut\nmethod_dist &lt;- works %&gt;%\n  filter(fake_student_id %in% valid_ids,\n         !is.na(employmentmethod) & employmentmethod != \"\") %&gt;%\n  distinct(fake_student_id, .keep_all = TRUE) %&gt;%\n  select(fake_student_id, employmentmethod)\n\n# 4) employmentmethod ID → name eşlemesi\nmethod_dist &lt;- method_dist %&gt;%\n  inner_join(\n    employment_methods %&gt;% select(id, name),\n    by = c(\"employmentmethod\" = \"id\")\n  )\n\n# 5) Metot başına çalışan sayısı ve oranı hesapla\nmethod_summary &lt;- method_dist %&gt;%\n  count(name, name = \"n\") %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(\n    pct   = n / sum(n),\n    label = percent(pct, accuracy = 0.1)\n  )\n\n# 6) Grafik — en çoktan daha aza yatay bar\nggplot(method_summary, aes(\n      x = n,\n      y = reorder(name, n),\n      fill = name\n    )) +\n  geom_col(show.legend = FALSE, width = 0.7) +\n  geom_text(aes(label = label), hjust = -0.1, size = 3) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, .1)),\n    labels = comma\n  ) +\n  labs(\n    title    = \"Mezun ve Öğrenci İşe Giriş Metotları\",\n    subtitle = sprintf(\"Toplam %d farklı metot\", n_distinct(method_summary$name)),\n    x        = \"Çalışan Sayısı\",\n    y        = \"İşe Giriş Metodu\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(\n    axis.text.y   = element_text(size = 10),\n    plot.title    = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    plot.margin   = margin(5, 20, 5, 5)\n  )"
  },
  {
    "objectID": "project.html#trend-analysis",
    "href": "project.html#trend-analysis",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "3.2 Trend Analysis",
    "text": "3.2 Trend Analysis\nxxxxxx"
  },
  {
    "objectID": "project.html#model-fitting",
    "href": "project.html#model-fitting",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "3.3 Model Fitting",
    "text": "3.3 Model Fitting\nxxxxxx"
  },
  {
    "objectID": "project.html#results",
    "href": "project.html#results",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "3.4 Results",
    "text": "3.4 Results\nxxxxxx"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the [term and year, e.g. Spring 2024-2025] EMU660 Decision Making with Analytics course.\nPlease use left menu to navigate through my assignments.\n\n\n\n Back to top",
    "crumbs": [
      "My Assignments"
    ]
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nBusiness Excellence & Continuous Improvement Lead Engineer , Roketsan 2018-ongoing\nIndustrial Engineer, Beko , 2014-2018"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nFirm aaa, position xx, year xxx\nFirm bbb, position yyy, year yyy"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Çağrı Durmaz Blog",
    "section": "",
    "text": "“I am sharing my first blog post as part of a course assignment. I am pleased to be taking this course and to have the opportunity to develop myself. Gaining new knowledge and contributing to this platform is a valuable experience for me. I hope to continue sharing more content here in the future.” - 12.03.2025\n\n\n\n Back to top"
  },
  {
    "objectID": "docs/assignments/assignment-1.html",
    "href": "docs/assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\nMy first assignment has two parts."
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has three parts.",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Assignment 2\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Assignment 2"
    ]
  },
  {
    "objectID": "assignments/assignment-1.html#a-mtcars-data-set",
    "href": "assignments/assignment-1.html#a-mtcars-data-set",
    "title": "Assignment 1",
    "section": "",
    "text": "Write a Custom Summary Function:\n\n\n# loading dataset\ndata(\"mtcars\")\n# 5 rows look\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n# compute_stats function\ncompute_stats &lt;- function(x) {\n  # input numeric control\n  if (!is.numeric(x)) {\n    stop(\"Input must be a numeric vector.\")\n  }\n  \n  # statistical calculations\n  mean_x   &lt;- mean(x)\n  median_x &lt;- median(x)\n  var_x    &lt;- var(x)\n  iqr_x    &lt;- IQR(x)\n  min_x    &lt;- min(x)\n  max_x    &lt;- max(x)\n  \n  # list results\n  stats_list &lt;- list(\n    mean      = mean_x,\n    median    = median_x,\n    variance  = var_x,\n    iqr       = iqr_x,\n    minimum   = min_x,\n    maximum   = max_x\n  )\n  \n  return(stats_list)\n}\n\n# Sample function : mtcars dataset mpg columns statistics \ncompute_stats(mtcars$mpg)\n\n$mean\n[1] 20.09062\n\n$median\n[1] 19.2\n\n$variance\n[1] 36.3241\n\n$iqr\n[1] 7.375\n\n$minimum\n[1] 10.4\n\n$maximum\n[1] 33.9",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "assignments/assignment-1.html#a-video-summary",
    "href": "assignments/assignment-1.html#a-video-summary",
    "title": "Assignment 1",
    "section": "(a) Video Summary:",
    "text": "(a) Video Summary:\nVeri Bilimi ve Endüstri Mühendisliği Üzerine Sohbetler - Cem Vardar & Erdi Dasdemir\nMr. Cem Vardar, an accomplished Data Scientist, delves into the realm of prescriptive analytics and optimization. His expertise spans problem-solving, industrial engineering, and the latest trends in data analytics. Vardar also provides insights into the diverse data-related roles and the specific problem types that each role entails. Furthermore, he presents a comprehensive study that outlines the desired qualities and characteristics for data science roles. As a seasoned scientist, Vardar concludes his presentation with valuable suggestions, a reading list, and an interactive Q&A session, fostering a dynamic learning environment.",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "assignments/assignment-1.html#b-explore-statistical-summaries-with-custom-functions-and-iteration-methods",
    "href": "assignments/assignment-1.html#b-explore-statistical-summaries-with-custom-functions-and-iteration-methods",
    "title": "Assignment 1",
    "section": "(b) Explore Statistical Summaries with Custom Functions and Iteration Methods:",
    "text": "(b) Explore Statistical Summaries with Custom Functions and Iteration Methods:\n\nWrite a Custom Summary Function:\n\n\n# loading dataset\ndata(\"mtcars\")\n# 5 rows look\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n# compute_stats function\ncompute_stats &lt;- function(x) {\n  # input numeric control\n  if (!is.numeric(x)) {\n    stop(\"Input must be a numeric vector.\")\n  }\n  \n  # statistical calculations\n  mean_x   &lt;- mean(x)\n  median_x &lt;- median(x)\n  var_x    &lt;- var(x)\n  iqr_x    &lt;- IQR(x)\n  min_x    &lt;- min(x)\n  max_x    &lt;- max(x)\n  \n  # list results\n  stats_list &lt;- list(\n    mean      = mean_x,\n    median    = median_x,\n    variance  = var_x,\n    iqr       = iqr_x,\n    minimum   = min_x,\n    maximum   = max_x\n  )\n  \n  return(stats_list)\n}\n\n# Sample function : mtcars dataset mpg columns statistics \ncompute_stats(mtcars$mpg)\n\n$mean\n[1] 20.09062\n\n$median\n[1] 19.2\n\n$variance\n[1] 36.3241\n\n$iqr\n[1] 7.375\n\n$minimum\n[1] 10.4\n\n$maximum\n[1] 33.9\n\n\n\nApplying the Function Using a Loop:\n\n\nfor (col_name in names(mtcars)) {\n  # Check if the column is numeric\n  if (is.numeric(mtcars[[col_name]])) {\n    # Apply the compute_stats function to the column\n    stats &lt;- compute_stats(mtcars[[col_name]])\n    # Print the column name and computed statistics\n    cat(\"Column:\", col_name, \"\\n\")\n    print(stats)\n    cat(\"\\n\")  # Add a blank line for better readability\n  }\n}\n\nColumn: mpg \n$mean\n[1] 20.09062\n\n$median\n[1] 19.2\n\n$variance\n[1] 36.3241\n\n$iqr\n[1] 7.375\n\n$minimum\n[1] 10.4\n\n$maximum\n[1] 33.9\n\n\nColumn: cyl \n$mean\n[1] 6.1875\n\n$median\n[1] 6\n\n$variance\n[1] 3.189516\n\n$iqr\n[1] 4\n\n$minimum\n[1] 4\n\n$maximum\n[1] 8\n\n\nColumn: disp \n$mean\n[1] 230.7219\n\n$median\n[1] 196.3\n\n$variance\n[1] 15360.8\n\n$iqr\n[1] 205.175\n\n$minimum\n[1] 71.1\n\n$maximum\n[1] 472\n\n\nColumn: hp \n$mean\n[1] 146.6875\n\n$median\n[1] 123\n\n$variance\n[1] 4700.867\n\n$iqr\n[1] 83.5\n\n$minimum\n[1] 52\n\n$maximum\n[1] 335\n\n\nColumn: drat \n$mean\n[1] 3.596563\n\n$median\n[1] 3.695\n\n$variance\n[1] 0.2858814\n\n$iqr\n[1] 0.84\n\n$minimum\n[1] 2.76\n\n$maximum\n[1] 4.93\n\n\nColumn: wt \n$mean\n[1] 3.21725\n\n$median\n[1] 3.325\n\n$variance\n[1] 0.957379\n\n$iqr\n[1] 1.02875\n\n$minimum\n[1] 1.513\n\n$maximum\n[1] 5.424\n\n\nColumn: qsec \n$mean\n[1] 17.84875\n\n$median\n[1] 17.71\n\n$variance\n[1] 3.193166\n\n$iqr\n[1] 2.0075\n\n$minimum\n[1] 14.5\n\n$maximum\n[1] 22.9\n\n\nColumn: vs \n$mean\n[1] 0.4375\n\n$median\n[1] 0\n\n$variance\n[1] 0.2540323\n\n$iqr\n[1] 1\n\n$minimum\n[1] 0\n\n$maximum\n[1] 1\n\n\nColumn: am \n$mean\n[1] 0.40625\n\n$median\n[1] 0\n\n$variance\n[1] 0.2489919\n\n$iqr\n[1] 1\n\n$minimum\n[1] 0\n\n$maximum\n[1] 1\n\n\nColumn: gear \n$mean\n[1] 3.6875\n\n$median\n[1] 4\n\n$variance\n[1] 0.5443548\n\n$iqr\n[1] 1\n\n$minimum\n[1] 3\n\n$maximum\n[1] 5\n\n\nColumn: carb \n$mean\n[1] 2.8125\n\n$median\n[1] 2\n\n$variance\n[1] 2.608871\n\n$iqr\n[1] 2\n\n$minimum\n[1] 1\n\n$maximum\n[1] 8\n\n\n\nAn alternative approach with sapply and apply:\n\n\nstats_sapply &lt;- sapply(mtcars, compute_stats)\nstats_sapply\n\n         mpg      cyl      disp     hp       drat      wt       qsec    \nmean     20.09062 6.1875   230.7219 146.6875 3.596563  3.21725  17.84875\nmedian   19.2     6        196.3    123      3.695     3.325    17.71   \nvariance 36.3241  3.189516 15360.8  4700.867 0.2858814 0.957379 3.193166\niqr      7.375    4        205.175  83.5     0.84      1.02875  2.0075  \nminimum  10.4     4        71.1     52       2.76      1.513    14.5    \nmaximum  33.9     8        472      335      4.93      5.424    22.9    \n         vs        am        gear      carb    \nmean     0.4375    0.40625   3.6875    2.8125  \nmedian   0         0         4         2       \nvariance 0.2540323 0.2489919 0.5443548 2.608871\niqr      1         1         1         2       \nminimum  0         0         3         1       \nmaximum  1         1         5         8       \n\n\n\nmtcars_mat &lt;- as.matrix(mtcars)\n\n# margin=2 for columns\nstats_apply &lt;- apply(mtcars_mat, 2, compute_stats)\nstats_apply\n\n$mpg\n$mpg$mean\n[1] 20.09062\n\n$mpg$median\n[1] 19.2\n\n$mpg$variance\n[1] 36.3241\n\n$mpg$iqr\n[1] 7.375\n\n$mpg$minimum\n[1] 10.4\n\n$mpg$maximum\n[1] 33.9\n\n\n$cyl\n$cyl$mean\n[1] 6.1875\n\n$cyl$median\n[1] 6\n\n$cyl$variance\n[1] 3.189516\n\n$cyl$iqr\n[1] 4\n\n$cyl$minimum\n[1] 4\n\n$cyl$maximum\n[1] 8\n\n\n$disp\n$disp$mean\n[1] 230.7219\n\n$disp$median\n[1] 196.3\n\n$disp$variance\n[1] 15360.8\n\n$disp$iqr\n[1] 205.175\n\n$disp$minimum\n[1] 71.1\n\n$disp$maximum\n[1] 472\n\n\n$hp\n$hp$mean\n[1] 146.6875\n\n$hp$median\n[1] 123\n\n$hp$variance\n[1] 4700.867\n\n$hp$iqr\n[1] 83.5\n\n$hp$minimum\n[1] 52\n\n$hp$maximum\n[1] 335\n\n\n$drat\n$drat$mean\n[1] 3.596563\n\n$drat$median\n[1] 3.695\n\n$drat$variance\n[1] 0.2858814\n\n$drat$iqr\n[1] 0.84\n\n$drat$minimum\n[1] 2.76\n\n$drat$maximum\n[1] 4.93\n\n\n$wt\n$wt$mean\n[1] 3.21725\n\n$wt$median\n[1] 3.325\n\n$wt$variance\n[1] 0.957379\n\n$wt$iqr\n[1] 1.02875\n\n$wt$minimum\n[1] 1.513\n\n$wt$maximum\n[1] 5.424\n\n\n$qsec\n$qsec$mean\n[1] 17.84875\n\n$qsec$median\n[1] 17.71\n\n$qsec$variance\n[1] 3.193166\n\n$qsec$iqr\n[1] 2.0075\n\n$qsec$minimum\n[1] 14.5\n\n$qsec$maximum\n[1] 22.9\n\n\n$vs\n$vs$mean\n[1] 0.4375\n\n$vs$median\n[1] 0\n\n$vs$variance\n[1] 0.2540323\n\n$vs$iqr\n[1] 1\n\n$vs$minimum\n[1] 0\n\n$vs$maximum\n[1] 1\n\n\n$am\n$am$mean\n[1] 0.40625\n\n$am$median\n[1] 0\n\n$am$variance\n[1] 0.2489919\n\n$am$iqr\n[1] 1\n\n$am$minimum\n[1] 0\n\n$am$maximum\n[1] 1\n\n\n$gear\n$gear$mean\n[1] 3.6875\n\n$gear$median\n[1] 4\n\n$gear$variance\n[1] 0.5443548\n\n$gear$iqr\n[1] 1\n\n$gear$minimum\n[1] 3\n\n$gear$maximum\n[1] 5\n\n\n$carb\n$carb$mean\n[1] 2.8125\n\n$carb$median\n[1] 2\n\n$carb$variance\n[1] 2.608871\n\n$carb$iqr\n[1] 2\n\n$carb$minimum\n[1] 1\n\n$carb$maximum\n[1] 8",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "assignments/assignment-1.html#b",
    "href": "assignments/assignment-1.html#b",
    "title": "Assignment 1",
    "section": "(b)",
    "text": "(b)",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "assignments/assignment-1.html#c-na_example-dataset",
    "href": "assignments/assignment-1.html#c-na_example-dataset",
    "title": "Assignment 1",
    "section": "(c) “na_example” dataset :",
    "text": "(c) “na_example” dataset :\n\n# Load the dslabs package and the na_example dataset\nlibrary(dslabs)\ndata(\"na_example\")\n\n# Display the dataset's contents (including NA values)\ncat(\"Original na_example dataset:\\n\")\n\nOriginal na_example dataset:\n\nprint(na_example)\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n# Report the total count of NA values and their index positions\nna_count &lt;- sum(is.na(na_example))\nna_positions &lt;- which(is.na(na_example))\ncat(\"\\nTotal count of NA values:\", na_count, \"\\n\")\n\n\nTotal count of NA values: 145 \n\ncat(\"Index positions of NA values:\", na_positions, \"\\n\")\n\nIndex positions of NA valuesn\n# Compute mean and standard deviation of the original dataset (ignoring NAs)\noriginal_mean &lt;- mean(na_example, na.rm = TRUE)\noriginal_sd &lt;- sd(na_example, na.rm = TRUE)\ncat(\"\\nOriginal dataset (ignoring NAs):\\n\")\n\n\nOriginal dataset (ignoring NAs):\n\ncat(\"Mean:\", original_mean, \"\\n\")\n\nMean: 2.301754 \n\ncat(\"Standard deviation:\", original_sd, \"\\n\")\n\nStandard deviation: 1.22338 \n\n# Version 1: Replace NA values with the median of non-missing values\nmedian_value &lt;- median(na_example, na.rm = TRUE)\nversion1 &lt;- na_example\nversion1[is.na(version1)] &lt;- median_value\n\n# Version 2: Replace NA values with a randomly selected non-missing value\nnon_missing &lt;- na_example[!is.na(na_example)]\nrandom_values &lt;- sample(non_missing, size = na_count, replace = TRUE)\nversion2 &lt;- na_example\nversion2[is.na(version2)] &lt;- random_values\n\n# Compute mean and standard deviation for both modified versions\nversion1_mean &lt;- mean(version1)\nversion1_sd &lt;- sd(version1)\nversion2_mean &lt;- mean(version2)\nversion2_sd &lt;- sd(version2)\n\n# Display results for Version 1\ncat(\"\\nVersion 1 (NA replaced with median):\\n\")\n\n\nVersion 1 (NA replaced with median):\n\ncat(\"Mean:\", version1_mean, \"\\n\")\n\nMean: 2.258 \n\ncat(\"Standard deviation:\", version1_sd, \"\\n\")\n\nStandard deviation: 1.136102 \n\n# Display results for Version 2\ncat(\"\\nVersion 2 (NA replaced with random values):\\n\")\n\n\nVersion 2 (NA replaced with random values):\n\ncat(\"Mean:\", version2_mean, \"\\n\")\n\nMean: 2.311 \n\ncat(\"Standard deviation:\", version2_sd, \"\\n\")\n\nStandard deviation: 1.234424 \n\n# Comparison and explanation\ncat(\"\\nComparison of Results:\\n\")\n\n\nComparison of Results:\n\ncat(\"Original Mean (ignoring NAs):\", original_mean, \" | SD:\", original_sd, \"\\n\")\n\nOriginal Mean (ignoring NAs): 2.301754  | SD: 1.22338 \n\ncat(\"Version 1 Mean (median fill):\", version1_mean, \" | SD:\", version1_sd, \"\\n\")\n\nVersion 1 Mean (median fill): 2.258  | SD: 1.136102 \n\ncat(\"Version 2 Mean (random fill):\", version2_mean, \" | SD:\", version2_sd, \"\\n\")\n\nVersion 2 Mean (random fill): 2.311  | SD: 1.234424 \n\n\nExplanation:\n\nThe ‘na_example’ dataset is a simple integer vector with some missing values.\nReplacing NAs with the median (Version 1) keeps the central tendency stable but reduces variability (lower SD), as it fills all missing values with a single number.\nReplacing NAs with random values (Version 2) maintains more of the original variability (SD closer to original) but may shift the mean depending on the random values chosen.\nFor this dataset, Version 2 might be more appropriate if preserving variability is important, while Version 1 is better if maintaining a consistent central tendency is the priority.",
    "crumbs": [
      "Assignment 1"
    ]
  },
  {
    "objectID": "project.html#veri-kaynağı",
    "href": "project.html#veri-kaynağı",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "2.1 Veri Kaynağı",
    "text": "2.1 Veri Kaynağı\nVeri seti, üniversitenin mezun bilgi sisteminden anonim olarak temin edilmiştir."
  },
  {
    "objectID": "project.html#veri-ile-ilgili-genel-bilgiler",
    "href": "project.html#veri-ile-ilgili-genel-bilgiler",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "2.2 Veri ile İlgili Genel Bilgiler",
    "text": "2.2 Veri ile İlgili Genel Bilgiler\nVeri kümesi, Hacettepe Üniversitesi Endüstri Mühendisliği bölümünden mezun yaklaşık 800 lisans öğrencisine ait şu bilgileri içermektedir: \n▪ GPA (Sayısal): Mezuniyet not ortalaması \n▪ Mezun olunan lise türü (Kategorik): Fen, Anadolu, özel lise vs. \n▪ Erasmus+ katılım durumu (Kategorik): Evet/Hayır \n▪ İşe başlama süresi (Sayısal): Mezuniyetten sonraki süre (ay olarak) \n▪ Çalışılan şirket (Kategorik) \n▪ İş pozisyonu (Kategorik) \n▪ Cinsiyet (Kategorik)"
  },
  {
    "objectID": "project.html#proje-seçim-sebebi",
    "href": "project.html#proje-seçim-sebebi",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "2.3 Proje Seçim Sebebi",
    "text": "2.3 Proje Seçim Sebebi\nBu proje, mezunların iş hayatına giriş süreçlerini anlamak, iş bulma süreleri ve tercih ettikleri kariyer yollarını değerlendirmek için seçilmiştir. Hacettepe Üniversitesi Endüstri Mühendisliği bölümü özelindeki mezun profilini anlamak, bölümü tercih edecek adaylara öngörüler sunmak ve gelecekteki mezunlara kariyer danışmanlığı sağlamak projenin temel amacıdır."
  },
  {
    "objectID": "project.html#ön-işleme-adımları",
    "href": "project.html#ön-işleme-adımları",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "2.4 Ön İşleme Adımları",
    "text": "2.4 Ön İşleme Adımları\nBu aşamada veri analizi öncesi gerçekleştirilen ön işleme adımları açıklanmıştır.\n\nGerekli kütüphanelerin yüklenmesi\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\n\nÖncesinde kod ile hazırlanan standartlaştırılmış rds dosyasının okunması : Bu kod ile farklı tablolarda yer alan sütun isimleri standartlaştırılmış, ihtiyaç dışı kolon ve csv dosyaları silinmiştir.\n\n\nanonim_temiz_veri_listesi &lt;- readRDS(\"/Users/cagridurmaz/Documents/GitHub/emu660-spring2025-cagridurmaz/islenmis_veri/anonim_temiz_veri_listesi.rds\")"
  },
  {
    "objectID": "project.html#mezun-öğrencilere-ilişkin-genel-bilgiler",
    "href": "project.html#mezun-öğrencilere-ilişkin-genel-bilgiler",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "3.1 Mezun / Öğrencilere İlişkin Genel Bilgiler",
    "text": "3.1 Mezun / Öğrencilere İlişkin Genel Bilgiler\n\n# --- Settings ---\n# Common student ID column name\nid_sutun_adi &lt;- \"fake_student_id\"\n\n# Data frame names\naffiliations_df_adi &lt;- \"affiliations\"\nusers_df_adi &lt;- \"users\"\n\n# Filter criteria for affiliations\ntarget_type &lt;- 2  # Change to \"2\" if type is a string\n\n# Gender column in users\ngender_sutun_adi &lt;- \"gender\"\n\n# --- Validation ---\n# Check if the main list exists and is a list\nif (!exists(\"anonim_temiz_veri_listesi\") || !is.list(anonim_temiz_veri_listesi)) {\n  stop(\"HATA: 'anonim_temiz_veri_listesi' objesi bulunamadı veya liste değil.\")\n}\n\n# Check if required data frames exist\nrequired_dfs &lt;- c(affiliations_df_adi, users_df_adi)\nmissing_dfs &lt;- setdiff(required_dfs, names(anonim_temiz_veri_listesi))\nif (length(missing_dfs) &gt; 0) {\n  stop(\"HATA: Şu DataFrame'ler listede bulunamadı: \", paste(missing_dfs, collapse=\", \"))\n}\n\naffiliations_df &lt;- anonim_temiz_veri_listesi[[affiliations_df_adi]]\nusers_df &lt;- anonim_temiz_veri_listesi[[users_df_adi]]\n\n# Check if required columns exist\nif (!all(c(id_sutun_adi, \"type\") %in% names(affiliations_df))) {\n  stop(\"HATA: '\", affiliations_df_adi, \"' içinde '\", id_sutun_adi, \"' veya 'type' sütunları eksik.\")\n}\nif (!all(c(id_sutun_adi, gender_sutun_adi) %in% names(users_df))) {\n  stop(\"HATA: '\", users_df_adi, \"' içinde '\", id_sutun_adi, \"' veya '\", gender_sutun_adi, \"' sütunları eksik.\")\n}\n\n\n# Filter affiliations and get unique student IDs\nfiltrelenmis_idler_df &lt;- affiliations_df %&gt;%\n  filter(type == target_type) %&gt;%\n  select(all_of(id_sutun_adi)) %&gt;%\n  distinct()\n\nfiltrelenmis_ogrenci_idler &lt;- filtrelenmis_idler_df[[id_sutun_adi]]\n\ncat(\"  &gt;\", length(filtrelenmis_ogrenci_idler), \"adet mezun öğrenci bulundu.\\n\")\n\n  &gt; 743 adet mezun öğrenci bulundu.\n\n# Stop if no students are found\nif (length(filtrelenmis_ogrenci_idler) == 0) {\n  stop(\"HATA: 'type' = 2 koşuluna uyan öğrenci bulunamadı.\")\n}\n\n\n# Filter users to get gender for matching student IDs\ngender_df &lt;- users_df %&gt;%\n  filter(.data[[id_sutun_adi]] %in% filtrelenmis_ogrenci_idler) %&gt;%\n  select(all_of(id_sutun_adi), all_of(gender_sutun_adi))\n\n# Check if any gender data was found\nif (nrow(gender_df) == 0) {\n  stop(\"HATA: Filtrelenmiş öğrenci ID'leri için cinsiyet verisi bulunamadı.\")\n}\n\n\n# Summarize gender counts and proportions\ngender_summary &lt;- gender_df %&gt;%\n  count(.data[[gender_sutun_adi]]) %&gt;%\n  mutate(\n    oran = n / sum(n),\n    yuzde = oran * 100,\n    etiket = sprintf(\"%.1f%%\", yuzde)\n  )\n\n# Rename gender column for clarity\ncolnames(gender_summary)[1] &lt;- \"Cinsiyet\"\n\n# Map gender values to Turkish (adjust if gender values differ)\ngender_summary &lt;- gender_summary %&gt;%\n  mutate(Cinsiyet = case_when(\n    Cinsiyet == \"female\" ~ \"Kadın\",\n    Cinsiyet == \"male\" ~ \"Erkek\",\n    TRUE ~ as.character(Cinsiyet)  # Keep other values as is\n  ))\n\n\n\n# Create bar plot\np &lt;- ggplot(gender_summary, aes(x = Cinsiyet, y = oran, fill = Cinsiyet)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = etiket), vjust = -0.5, size = 4) +\n  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +\n  labs(\n    title = \"Mezunların Cinsiyet Dağılımı\",\n    x = \"Cinsiyet\",\n    y = \"Oran\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 12),\n    legend.position = \"none\"  # Remove legend since x-axis labels are clear\n  )\n\n\n# Display the plot (optional, depending on environment)\nprint(p)\n\n\n\n\n\n\n\n\nMezun ve öğrencilerin şehir dağılımı :\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# 1) type = 2 veya 3 olan öğrencilerin ID'leri\naff_ids &lt;- anonim_temiz_veri_listesi[[\"affiliations\"]] %&gt;%\n  filter(type %in% c(2, 3)) %&gt;%\n  pull(fake_student_id)\n\n# 2) users tablosundan o ID'lerle highschool ID'si al\nusr_hs &lt;- anonim_temiz_veri_listesi[[\"users\"]] %&gt;%\n  filter(fake_student_id %in% aff_ids) %&gt;%\n  select(fake_student_id, highschool)\n\n# 3) highschool ID -&gt; il eşlemesi\nhs_prov &lt;- usr_hs %&gt;%\n  inner_join(\n    anonim_temiz_veri_listesi[[\"highschools\"]] %&gt;%\n      select(id, city),   # kendi sütun adınızla değiştirin\n    by = c(\"highschool\" = \"id\")\n  ) %&gt;%\n  rename(il = city)\n\n# 4) İllere göre say, oran ve etiket üret\nprov_dist &lt;- hs_prov %&gt;%\n  filter(!is.na(il) & il != \"\") %&gt;%\n  count(il) %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(\n    pct   = n / sum(n),\n    label = sprintf(\"%.1f%%\", pct * 100)\n  )\n\n# 5) **Sadece ilk 10 il**i seç\ntop10_prov &lt;- prov_dist %&gt;%\n  slice_max(order_by = n, n = 10)\n\nggplot(top10_prov, aes(\n      x = reorder(il, -n),    # &lt;- -n ile büyükten küçüğe doğru\n      y = n,\n      fill = il\n    )) +\n  geom_col(width = 0.7) +\n  geom_text(aes(label = label), vjust = -0.5, size = 3) +\n  labs(\n    title = \"En Çok Öğrenci/Mezun Gelen İlk 10 İl\",\n    x     = \"İl\",\n    y     = \"Kişi Sayısı\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position   = \"none\",\n    axis.text.x       = element_text(angle = 45, hjust = 1),\n    plot.title        = element_text(hjust = 0.5, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# 1) Ham verileri al\nminor_departments &lt;- anonim_temiz_veri_listesi[[\"minor_departments\"]]\nminor_students &lt;- anonim_temiz_veri_listesi[[\"minor_students\"]]\n\n# Debug: Veri yapısını kontrol et\ncat(\"Rows in minor_departments:\", nrow(minor_departments), \"\\n\")\n\nRows in minor_departments: 7 \n\ncat(\"Columns in minor_departments:\", names(minor_departments), \"\\n\")\n\nColumns in minor_departments: id department \n\ncat(\"Rows in minor_students:\", nrow(minor_students), \"\\n\")\n\nRows in minor_students: 26 \n\ncat(\"Columns in minor_students:\", names(minor_students), \"\\n\")\n\nColumns in minor_students: minorid graduatedate fake_student_id \n\n# 2) Minor öğrencileri ve departmanları birleştir\nminor_data &lt;- minor_students %&gt;%\n  select(fake_student_id, minorid) %&gt;%\n  distinct(fake_student_id, minorid, .keep_all = TRUE) %&gt;%  # Tekil öğrenci-minorid çiftlerini al\n  left_join(minor_departments %&gt;% select(id, department), \n            by = c(\"minorid\" = \"id\"))\ncat(\"Rows in minor_data after join:\", nrow(minor_data), \"\\n\")\n\nRows in minor_data after join: 26 \n\n# Debug: Eşleşmeyen minorid'leri kontrol et\nif (nrow(minor_data) == 0 || sum(is.na(minor_data$department)) == nrow(minor_data)) {\n  cat(\"No matching minorid found in minor_departments. Check minorid and id values:\\n\")\n  cat(\"Unique minorid in minor_students:\", unique(minor_students$minorid), \"\\n\")\n  cat(\"Unique id in minor_departments:\", unique(minor_departments$id), \"\\n\")\n}\n\n# 3) Departman kırılımı (her öğrenci bir kez sayılsın)\nminor_summary &lt;- minor_data %&gt;%\n  filter(!is.na(department)) %&gt;%  # NA departmanları çıkar\n  group_by(department) %&gt;%\n  summarise(Count = n_distinct(fake_student_id), .groups = \"drop\") %&gt;%  # Tekil öğrenci say\n  arrange(desc(Count))\ncat(\"Rows in minor_summary:\", nrow(minor_summary), \"\\n\")\n\nRows in minor_summary: 6 \n\nprint(minor_summary)\n\n# A tibble: 6 × 2\n  department              Count\n  &lt;chr&gt;                   &lt;int&gt;\n1 Computer Engineering       15\n2 Economics                   5\n3 Business Administration     2\n4 Statistics                  2\n5 Food Engineering            1\n6 Psychology                  1\n\n# 4) Grafik (eğer veri varsa)\nif (nrow(minor_summary) &gt; 0 && !all(is.na(minor_summary$department))) {\n  ggplot(minor_summary, aes(x = reorder(department, Count), y = Count)) +\n    geom_col(fill = \"steelblue\") +\n    coord_flip() +\n    labs(\n      title = \"Minor Yapan Öğrencilerin Departman Dağılımı\",\n      x = \"Departman\",\n      y = \"Öğrenci Sayısı\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n      axis.text = element_text(size = 11),\n      axis.title = element_text(size = 12)\n    )\n} else {\n  cat(\"No data available to plot. Check join and data content.\\n\")\n}\n\n\n\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(forcats)\n\n# --- Settings ---\nid_sutun_adi      &lt;- \"fake_student_id\"\nworks_df_adi      &lt;- \"works\"\ncountry_sutun_adi &lt;- \"country\"\n\n# --- DataFrames ---\nworks_df      &lt;- anonim_temiz_veri_listesi[[works_df_adi]]\ncompanies_df  &lt;- anonim_temiz_veri_listesi[[\"companies\"]]\nindustries_df &lt;- anonim_temiz_veri_listesi[[\"industries\"]]\n\n# --- 1) Ülke sayısı ---\ncountry_df &lt;- works_df %&gt;%\n  select(all_of(id_sutun_adi), all_of(country_sutun_adi)) %&gt;%\n  distinct() %&gt;%\n  filter(!is.na(.data[[country_sutun_adi]]) & .data[[country_sutun_adi]] != \"\")\n\nunique_countries &lt;- n_distinct(country_df[[country_sutun_adi]])\n\n# --- 2) Endüstri sayısı ---\nindustry_df &lt;- works_df %&gt;%\n  select(all_of(id_sutun_adi), companyid) %&gt;%\n  distinct() %&gt;%\n  filter(!is.na(companyid) & companyid != \"\") %&gt;%\n  left_join(\n    companies_df %&gt;% select(id, industry),\n    by = c(\"companyid\" = \"id\")\n  ) %&gt;%\n  filter(!is.na(industry) & industry != \"\") %&gt;%\n  left_join(\n    industries_df %&gt;% select(id, industrytr),\n    by = c(\"industry\" = \"id\")\n  )\n\nunique_industries &lt;- n_distinct(industry_df$industry)\n\n# --- 3) Pozisyon sayısı ---\nposition_df &lt;- works_df %&gt;%\n  select(all_of(id_sutun_adi), positionid) %&gt;%\n  distinct() %&gt;%\n  filter(!is.na(positionid) & positionid != \"\")\n\nunique_positions &lt;- n_distinct(position_df$positionid)\n\n# --- 4) İşveren (company) sayısı ---\nemployer_df &lt;- works_df %&gt;%\n  select(companyid) %&gt;%\n  distinct() %&gt;%\n  filter(!is.na(companyid) & companyid != \"\")\n\nunique_employers &lt;- n_distinct(employer_df$companyid)\n\n# --- 5) Özet cümlesi ---\ncat(sprintf(\n  \"Öğrencilerimiz ve mezunlarımız %d ülke, %d endüstri, %d iş pozisyonu ve %d işverende çalışmış veya halen çalışmaktadır.\\n\",\n  unique_countries,\n  unique_industries,\n  unique_positions,\n  unique_employers\n))\n\nÖğrencilerimiz ve mezunlarımız 28 ülke, 89 endüstri, 540 iş pozisyonu ve 755 işverende çalışmış veya halen çalışmaktadır."
  },
  {
    "objectID": "project.html#mezun-öğrencilerin-çalışma-hayatı-bilgileri",
    "href": "project.html#mezun-öğrencilerin-çalışma-hayatı-bilgileri",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "3.3 Mezun / Öğrencilerin Çalışma Hayatı Bilgileri",
    "text": "3.3 Mezun / Öğrencilerin Çalışma Hayatı Bilgileri\nStaj Bilgileri :\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# 1) Ham verileri al\ninternships &lt;- anonim_temiz_veri_listesi[[\"internships\"]]\ncompanies &lt;- anonim_temiz_veri_listesi[[\"companies\"]]\n\n# Debug: Veri yapısını kontrol et\ncat(\"Rows in internships:\", nrow(internships), \"\\n\")\n\nRows in internships: 1612 \n\ncat(\"Columns in internships:\", names(internships), \"\\n\")\n\nColumns in internships: id companyid positionid startdate enddate city country description employmentmethod companydepartment irecommend iamhappy ibenefits irelationships ienvironment icareer icareerfuture ieducation ioverall erasmus fake_student_id \n\ncat(\"Rows in companies:\", nrow(companies), \"\\n\")\n\nRows in companies: 1405 \n\ncat(\"Columns in companies:\", names(companies), \"\\n\")\n\nColumns in companies: id name industry \n\n# 2) Staj ve şirket verilerini birleştir\ninternship_data &lt;- internships %&gt;%\n  select(fake_student_id, companyid) %&gt;%\n  distinct(fake_student_id, companyid, .keep_all = TRUE) %&gt;%  # Tekil öğrenci-şirket çiftlerini al\n  left_join(companies %&gt;% select(id, name), \n            by = c(\"companyid\" = \"id\"))\ncat(\"Rows in internship_data after join:\", nrow(internship_data), \"\\n\")\n\nRows in internship_data after join: 1573 \n\n# Debug: Eşleşmeyen companyid'leri kontrol et\nif (nrow(internship_data) == 0 || sum(is.na(internship_data$name)) == nrow(internship_data)) {\n  cat(\"No matching companyid found in companies. Check companyid and id values:\\n\")\n  cat(\"Unique companyid in internships:\", unique(internships$companyid), \"\\n\")\n  cat(\"Unique id in companies:\", unique(companies$id), \"\\n\")\n}\n\n# 3) Şirket kırılımı (her öğrenci-şirket çifti bir kez sayılsın)\ncompany_summary &lt;- internship_data %&gt;%\n  filter(!is.na(name)) %&gt;%  # NA şirket adlarını çıkar\n  group_by(name) %&gt;%\n  summarise(Count = n_distinct(fake_student_id), .groups = \"drop\") %&gt;%  # Tekil öğrenci say\n  arrange(desc(Count)) %&gt;%\n  slice_head(n = 10)  # En çok staj yapılan ilk 10 şirket\ncat(\"Rows in company_summary:\", nrow(company_summary), \"\\n\")\n\nRows in company_summary: 10 \n\nprint(company_summary)\n\n# A tibble: 10 × 2\n   name                    Count\n   &lt;chr&gt;                   &lt;int&gt;\n 1 TAI - TUSAŞ                97\n 2 ASELSAN                    86\n 3 Türk Traktör               49\n 4 Arçelik                    22\n 5 HAVELSAN                   22\n 6 TUSAŞ                      22\n 7 Mercedes Benz Türk         21\n 8 ROKETSAN                   19\n 9 FNSS Savunma Sistemleri    14\n10 MAN Türkiye                14\n\n# 4) Grafik (eğer veri varsa)\nif (nrow(company_summary) &gt; 0 && !all(is.na(company_summary$name))) {\n  ggplot(company_summary, aes(x = reorder(name, Count), y = Count)) +\n    geom_col(fill = \"steelblue\") +\n    coord_flip() +\n    labs(\n      title = \"En Çok Staj Yapılan Şirketlerin Dağılımı\",\n      x = \"Şirket\",\n      y = \"Stajyer Sayısı\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n      axis.text = element_text(size = 11),\n      axis.title = element_text(size = 12)\n    )\n} else {\n  cat(\"No data available to plot. Check join and data content.\\n\")\n}\n\n\n\n\n\n\n\n\nMezunların çalıştığı sektörler :\n\n# Load required packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(forcats)  # For reordering factors\n\n# --- Settings ---\nid_sutun_adi        &lt;- \"fake_student_id\"\nworks_df_adi        &lt;- \"works\"\ncompanies_df_adi    &lt;- \"companies\"\nindustries_df_adi   &lt;- \"industries\"\ncompanyid_sutun_adi &lt;- \"companyid\"\ncompany_id_sutun_adi&lt;- \"id\"\nmax_industries      &lt;- 10  # Kaç endüstri göstereceğiz\n\n# --- Validation ---\nif (!exists(\"anonim_temiz_veri_listesi\") || !is.list(anonim_temiz_veri_listesi)) {\n  stop(\"HATA: 'anonim_temiz_veri_listesi' objesi bulunamadı veya liste değil.\")\n}\nrequired_dfs &lt;- c(works_df_adi, companies_df_adi, industries_df_adi)\nmissing_dfs  &lt;- setdiff(required_dfs, names(anonim_temiz_veri_listesi))\nif (length(missing_dfs) &gt; 0) {\n  stop(\"HATA: Şu DataFrame'ler listede bulunamadı: \", paste(missing_dfs, collapse = \", \"))\n}\n\nworks_df      &lt;- anonim_temiz_veri_listesi[[works_df_adi]]\ncompanies_df  &lt;- anonim_temiz_veri_listesi[[companies_df_adi]]\nindustries_df &lt;- anonim_temiz_veri_listesi[[industries_df_adi]]\n\n# industries_df içinde 'industrytr' sütunu olmalı\nif (!all(c(\"id\",\"industrytr\") %in% names(industries_df))) {\n  stop(\"HATA: '\", industries_df_adi, \"' içinde 'id' veya 'industrytr' sütunu bulunamadı.\")\n}\n\n# --- Build industry data frame ---\nindustry_df &lt;- works_df %&gt;%\n  select(all_of(id_sutun_adi), all_of(companyid_sutun_adi)) %&gt;%\n  distinct() %&gt;%\n  filter(!is.na(.data[[companyid_sutun_adi]]) & .data[[companyid_sutun_adi]] != \"\") %&gt;%\n  # önce companyid ile şirket tablosuna, oradan industry id'ye ulaş\n  left_join(\n    companies_df %&gt;% select(all_of(company_id_sutun_adi), industry),\n    by = setNames(company_id_sutun_adi, companyid_sutun_adi)\n  ) %&gt;%\n  # sonra industry id ile industries_df'e kat, industrytr al\n  left_join(\n    industries_df %&gt;% select(id, industrytr),\n    by = c(\"industry\" = \"id\")\n  ) %&gt;%\n  rename(industry_name = industrytr)\n\n# Uyarı: eşleşmeyen kayıtlar\nunmatched &lt;- industry_df %&gt;% filter(is.na(industry_name))\nif (nrow(unmatched) &gt; 0) {\n  cat(\"UYARI:\", nrow(unmatched),\n      \"kayıt endüstri ile eşleşmedi. Örnek companyid değerleri:\\n\")\n  print(head(unmatched[[companyid_sutun_adi]], 5))\n}\n\nUYARI: 16 kayıt endüstri ile eşleşmedi. Örnek companyid değerleri:\n[1] \"1554\" \"1574\" \"1580\" \"1666\" \"1668\"\n\n# Geçerli endüstri kayıtlarını filtrele\nindustry_df &lt;- industry_df %&gt;%\n  filter(!is.na(industry_name) & industry_name != \"\")\n\nif (nrow(industry_df) == 0) {\n  stop(\"HATA: Geçerli endüstri verisi bulunamadı.\")\n}\n\n# --- Özet ve Grafik için Sayma ---\nunique_industries &lt;- n_distinct(industry_df$industry_name)\n\nindustry_summary &lt;- industry_df %&gt;%\n  count(industry_name) %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(\n    oran          = n / sum(n),\n    yuzde         = oran * 100,\n    etiket        = sprintf(\"%.1f%%\", yuzde),\n    industry_name = fct_reorder(industry_name, n)\n  )\n\nplot_data &lt;- industry_summary %&gt;%\n  slice_head(n = max_industries)\n\n# --- Plot ---\np &lt;- ggplot(plot_data, aes(y = industry_name, x = yuzde, fill = industry_name)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = etiket), hjust = 0, size = 3) +\n  scale_x_continuous(labels = scales::percent_format(scale = 1)) +\n  labs(\n    title    = \"Mezunların Çalıştığı Endüstriler\",\n    subtitle = sprintf(\"Toplam %d farklı endüstri (İlk %d)\", unique_industries, nrow(plot_data)),\n    x        = \"Çalışan Yüzdesi (%)\",\n    y        = \"Endüstri\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title    = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5)\n  )\n\nprint(p)\n\n\n\n\n\n\n\n\nMezunların çalıştığı şirketler :\n\n# Load required packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(forcats)  # For reordering factors\n\n# --- Settings ---\n# Common student ID column name\nid_sutun_adi &lt;- \"fake_student_id\"\n\n# Data frame names\nworks_df_adi &lt;- \"works\"\ncompanies_df_adi &lt;- \"companies\"\n\n# Column names\ncompanyid_sutun_adi &lt;- \"companyid\"\ncompany_id_sutun_adi &lt;- \"id\"\nname_sutun_adi &lt;- \"name\"\n\n# Number of companies to display in the plot (to avoid clutter)\nmax_companies &lt;- 10\n\n# --- Validation ---\n# Check if the main list exists and is a list\nif (!exists(\"anonim_temiz_veri_listesi\") || !is.list(anonim_temiz_veri_listesi)) {\n  stop(\"HATA: 'anonim_temiz_veri_listesi' objesi bulunamadı veya liste değil.\")\n}\n\n# Check if required data frames exist\nrequired_dfs &lt;- c(works_df_adi, companies_df_adi)\nmissing_dfs &lt;- setdiff(required_dfs, names(anonim_temiz_veri_listesi))\nif (length(missing_dfs) &gt; 0) {\n  stop(\"HATA: Şu DataFrame'ler listede bulunamadı: \", paste(missing_dfs, collapse=\", \"))\n}\n\nworks_df &lt;- anonim_temiz_veri_listesi[[works_df_adi]]\ncompanies_df &lt;- anonim_temiz_veri_listesi[[companies_df_adi]]\n\n# Check if required columns exist\nrequired_columns_works &lt;- c(id_sutun_adi, companyid_sutun_adi)\nif (!all(required_columns_works %in% names(works_df))) {\n  missing_cols &lt;- setdiff(required_columns_works, names(works_df))\n  stop(\"HATA: '\", works_df_adi, \"' içinde şu sütunlar eksik: \", paste(missing_cols, collapse=\", \"))\n}\n\nrequired_columns_companies &lt;- c(company_id_sutun_adi, name_sutun_adi)\nif (!all(required_columns_companies %in% names(companies_df))) {\n  missing_cols &lt;- setdiff(required_columns_companies, names(companies_df))\n  stop(\"HATA: '\", companies_df_adi, \"' içinde şu sütunlar eksik: \", paste(missing_cols, collapse=\", \"))\n}\n\n\n# Deduplicate by fake_student_id and companyid\ncompany_df &lt;- works_df %&gt;%\n  select(all_of(id_sutun_adi), all_of(companyid_sutun_adi)) %&gt;%\n  distinct() %&gt;%\n  filter(!is.na(.data[[companyid_sutun_adi]]) & .data[[companyid_sutun_adi]] != \"\")  # Remove NA or empty companyid\n\n\n# Join with companies to get name\ncompany_df &lt;- company_df %&gt;%\n  left_join(\n    companies_df %&gt;% select(all_of(company_id_sutun_adi), all_of(name_sutun_adi)),\n    by = setNames(company_id_sutun_adi, companyid_sutun_adi)\n  )\n\n# Check for unmatched companyid values\nunmatched &lt;- company_df %&gt;% filter(is.na(.data[[name_sutun_adi]]))\nif (nrow(unmatched) &gt; 0) {\n  cat(\"  UYARI: \", nrow(unmatched), \" kayıt şirket ismi ile eşleşmedi. Örnek companyid değerleri:\\n\")\n  print(head(unmatched[[companyid_sutun_adi]], 5))\n}\n\n# Filter out NA or empty company names\ncompany_df &lt;- company_df %&gt;%\n  filter(!is.na(.data[[name_sutun_adi]]) & .data[[name_sutun_adi]] != \"\")\n\n# Stop if no valid company data\nif (nrow(company_df) == 0) {\n  cat(\"HATA: Geçerli şirket verisi bulunamadı.\\n\")\n  cat(\"  - Eşleşen kayıt sayısı: \", nrow(company_df) + nrow(unmatched), \"\\n\")\n  cat(\"  - NA veya boş şirket ismi sayısı: \", nrow(unmatched), \"\\n\")\n  cat(\"  - Örnek works$companyid değerleri:\\n\")\n  print(head(works_df[[companyid_sutun_adi]], 5))\n  cat(\"  - Örnek companies$id değerleri:\\n\")\n  print(head(companies_df[[company_id_sutun_adi]], 5))\n  stop(\"HATA: Analiz için yeterli veri yok.\")\n}\n\n\n# Count unique companies\nunique_companies &lt;- n_distinct(company_df[[name_sutun_adi]])\n\n# Stop if no valid company data\nif (unique_companies == 0) {\n  stop(\"HATA: Geçerli şirket verisi bulunamadı.\")\n}\n\n\n# Count employees per company\ncompany_summary &lt;- company_df %&gt;%\n  count(.data[[name_sutun_adi]]) %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(\n    oran = n / sum(n),\n    yuzde = oran * 100,\n    etiket = sprintf(\"%.1f%%\", yuzde),\n    # Reorder company names for plotting (based on n for consistency)\n    !!name_sutun_adi := fct_reorder(.data[[name_sutun_adi]], n)\n  )\n\n\n# Limit to top N companies for plotting\nplot_data &lt;- company_summary %&gt;%\n  slice_head(n = max_companies)\n\n# Create horizontal bar plot with percentages on x-axis\np &lt;- ggplot(plot_data, aes(y = .data[[name_sutun_adi]], x = yuzde, fill = .data[[name_sutun_adi]])) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = etiket), hjust = 0, size = 3.0, angle = 0) +  # Rotate percentage labels\n  scale_x_continuous(labels = scales::percent_format(scale = 1)) +  # Format x-axis as percentages\n  labs(\n    title = \"Mezunların Çalıştığı Şirketler\",\n    subtitle = sprintf(\"Toplam %d Farklı şirket (İlk %d şirket)\", unique_companies, nrow(plot_data)),\n    x = \"Çalışan Yüzdesi (%)\",\n    y = \"Şirket\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5, size = 12),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10),\n    axis.title = element_text(size = 12),\n    legend.position = \"none\"  # Remove legend since y-axis labels are clear\n  )\n\n\n# Display the plot (optional, depending on environment)\nprint(p)\n\n\n\n\n\n\n\n\nÖğrencilerin İşe Giriş Metotları\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\n\n# 1) Gerekli veri setlerini al\nworks              &lt;- anonim_temiz_veri_listesi[[\"works\"]]\nemployment_methods &lt;- anonim_temiz_veri_listesi[[\"employmentmethod\"]]\naffiliations       &lt;- anonim_temiz_veri_listesi[[\"affiliations\"]]\n\n# 2) Sadece type = 2 veya 3 (mezun + öğrenci) olan ID’ler\nvalid_ids &lt;- affiliations %&gt;%\n  filter(type %in% c(2, 3)) %&gt;%\n  pull(fake_student_id) %&gt;%\n  unique()\n\n# 3) Bu ID’lerle works’u filtrele ve her kişinin sadece ilk employmentmethod kaydını tut\nmethod_dist &lt;- works %&gt;%\n  filter(fake_student_id %in% valid_ids,\n         !is.na(employmentmethod) & employmentmethod != \"\") %&gt;%\n  distinct(fake_student_id, .keep_all = TRUE) %&gt;%\n  select(fake_student_id, employmentmethod)\n\n# 4) employmentmethod ID → name eşlemesi\nmethod_dist &lt;- method_dist %&gt;%\n  inner_join(\n    employment_methods %&gt;% select(id, name),\n    by = c(\"employmentmethod\" = \"id\")\n  )\n\n# 5) Metot başına çalışan sayısı ve oranı hesapla\nmethod_summary &lt;- method_dist %&gt;%\n  count(name, name = \"n\") %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(\n    pct   = n / sum(n),\n    label = percent(pct, accuracy = 0.1)\n  )\n\n# 6) Grafik — en çoktan daha aza yatay bar\nggplot(method_summary, aes(\n      x = n,\n      y = reorder(name, n),\n      fill = name\n    )) +\n  geom_col(show.legend = FALSE, width = 0.7) +\n  geom_text(aes(label = label), hjust = -0.1, size = 3) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, .1)),\n    labels = comma\n  ) +\n  labs(\n    title    = \"Mezun ve Öğrenci İşe Giriş Metotları\",\n    subtitle = sprintf(\"Toplam %d farklı metot\", n_distinct(method_summary$name)),\n    x        = \"Çalışan Sayısı\",\n    y        = \"İşe Giriş Metodu\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(\n    axis.text.y   = element_text(size = 10),\n    plot.title    = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    plot.margin   = margin(5, 20, 5, 5)\n  )\n\n\n\n\n\n\n\n\nMezunların Çalıştığı Pozisyonlar :\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\n\n# 1) Veri setlerini al\nusers        &lt;- anonim_temiz_veri_listesi[[\"users\"]]\naffiliations &lt;- anonim_temiz_veri_listesi[[\"affiliations\"]]\nworks        &lt;- anonim_temiz_veri_listesi[[\"works\"]]\npositions    &lt;- anonim_temiz_veri_listesi[[\"positions\"]]\n\n# 2) Sadece mezunların ID'lerini (type == 2) al\ngrad_ids &lt;- affiliations %&gt;%\n  filter(type == 2) %&gt;%\n  pull(fake_student_id)\n\n# 3) works'u mezunlarla sınırlayıp, her mezunun ilk kaydını tut\nworks_grad &lt;- works %&gt;%\n  filter(fake_student_id %in% grad_ids,\n         !is.na(positionid) & positionid != \"\") %&gt;%\n  distinct(fake_student_id, .keep_all = TRUE)\n\n# 4) Pozisyon adlarını ekle\npos_dist &lt;- works_grad %&gt;%\n  inner_join(\n    positions %&gt;% select(id, position),\n    by = c(\"positionid\" = \"id\")\n  )\n\n# 5) Toplam pozisyon ve mezun sayısı\ntotal_positions &lt;- n_distinct(pos_dist$position)\ntotal_people    &lt;- n_distinct(pos_dist$fake_student_id)\nmessage(sprintf(\"Mezunlarımız %d farklı pozisyonda, toplam %d kişi çalışmaktadır.\",\n                total_positions, total_people))\n\nMezunlarımız 223 farklı pozisyonda, toplam 508 kişi çalışmaktadır.\n\n# 6) Pozisyon başına mezun sayısını ve oranını hesapla\npos_summary &lt;- pos_dist %&gt;%\n  count(position, name = \"n\") %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(\n    pct   = n / sum(n),\n    label = percent(pct, accuracy = 0.1)\n  )\n\n# 7) İlk 10 pozisyonu seç\ntop10_pos &lt;- pos_summary %&gt;% slice_max(order_by = n, n = 10)\n\n# 8) Yatay bar chart (en çoktan en aza)\nggplot(top10_pos, aes(\n      x = pct,\n      y = reorder(position, pct),\n      fill = position\n    )) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = label),\n            hjust = -0.1, size = 3) +\n  scale_x_continuous(\n    labels = percent_format(),\n    limits = c(0, max(top10_pos$pct) * 1.1)\n  ) +\n  labs(\n    title    = \"Mezunların En Çok Çalıştığı İlk 10 Pozisyon\",\n    subtitle = sprintf(\"Toplam %d pozisyon, %d mezun\", total_positions, total_people),\n    x        = \"Mezun Oranı\",\n    y        = \"Pozisyon\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position   = \"none\",\n    axis.text.y       = element_text(size = 10),\n    plot.title        = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle     = element_text(hjust = 0.5)\n  )"
  },
  {
    "objectID": "project.html#mezun-öğrencilerin-erasmus-programı-bilgileri",
    "href": "project.html#mezun-öğrencilerin-erasmus-programı-bilgileri",
    "title": "Hacettepe Üniversitesi Endüstri Mühendisliği Bölümü Gösterge Paneli",
    "section": "3.2 Mezun / Öğrencilerin Erasmus Programı Bilgileri",
    "text": "3.2 Mezun / Öğrencilerin Erasmus Programı Bilgileri\nErasmus Programı Katılımları :\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\n\n# ---- 1) Data hazırlığı ----\naffiliations &lt;- anonim_temiz_veri_listesi[[\"affiliations\"]]\nerasmus      &lt;- anonim_temiz_veri_listesi[[\"erasmus\"]]\nuniversities &lt;- anonim_temiz_veri_listesi[[\"universities\"]]\n\n# ---- 2) Affiliations türü 2 veya 3 olan öğrencilerin ID’leri ----\nvalid_ids &lt;- affiliations %&gt;%\n  filter(type %in% c(2, 3)) %&gt;%\n  pull(fake_student_id) %&gt;%\n  unique()\n\n# ---- 3) Bu öğrenciler arasından Erasmus’a gitmiş olanları seç ----\neras_valid &lt;- erasmus %&gt;%\n  filter(fake_student_id %in% valid_ids)\n\n# ---- 4) Her kaydı üniversite tablosuyla birleştirip ülke bilgisini al ----\neras_country &lt;- eras_valid %&gt;%\n  inner_join(\n    universities %&gt;% select(id, country),\n    by = c(\"universityid\" = \"id\")\n  ) %&gt;%\n  # eksik veya boş ülke adlarını at\n  filter(!is.na(country) & country != \"\") %&gt;%\n  # aynı öğrenci birden fazla kez sayılmasın\n  distinct(fake_student_id, country)\n\n# ---- 5) Ülke bazında öğrenci sayısını, sıralı hale getir ----\ncountry_counts &lt;- eras_country %&gt;%\n  count(country, name = \"n\") %&gt;%\n  arrange(desc(n))\n\ntotal_countries &lt;- n_distinct(country_counts$country)\ntotal_students  &lt;- n_distinct(eras_country$fake_student_id)\n\n# ---- 7) Yatay bar chart ile görselleştirme ----\nggplot(country_counts, aes(\n      x = n,\n      y = reorder(country, n),\n      fill = country\n    )) +\n  geom_col(show.legend = FALSE, width = 0.7) +\n  geom_text(aes(label = n), hjust = -0.1, size = 3) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, .1)),\n    labels = comma\n  ) +\n  labs(\n    title = \"Erasmus’a Gidilen Ülkelere Göre Öğrenci Sayısı\",\n    subtitle = sprintf(\"Toplam %d ülke, %d öğrenci\", total_countries, total_students),\n    x     = \"Öğrenci Sayısı\",\n    y     = \"Ülke\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    axis.text.y   = element_text(size = 10),\n    plot.title    = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    plot.margin   = margin(5, 20, 5, 5)\n  )\n\n\n\n\n\n\n\n\nErasmus Programı’na Göre Not Dağılımı\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# 1) affiliations içindeki cgpa’yı numeric'e çevir\naffiliations &lt;- anonim_temiz_veri_listesi[[\"affiliations\"]] %&gt;%\n  mutate(\n    cgpa = as.numeric(gsub(\",\", \".\", cgpa))\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `cgpa = as.numeric(gsub(\",\", \".\", cgpa))`.\nCaused by warning:\n! NAs introduced by coercion\n\n# 2) Erasmus’a giden mezunların ID’leri\ngrad_erasmus_ids &lt;- affiliations %&gt;%\n  filter(type == 2) %&gt;%\n  pull(fake_student_id) %&gt;%\n  intersect(\n    anonim_temiz_veri_listesi[[\"erasmus\"]] %&gt;% pull(fake_student_id)\n  )\n\n# 3) Sadece mezun + geçerli cgpa, birden fazla kayıt varsa tekilleştir\ngpa_df &lt;- affiliations %&gt;%\n  filter(type == 2, !is.na(cgpa)) %&gt;%\n  distinct(fake_student_id, cgpa) %&gt;%\n  mutate(\n    Grup = if_else(\n      fake_student_id %in% grad_erasmus_ids,\n      \"Erasmus\",\n      \"Non-Erasmus\"\n    )\n  )\n\n# 4) Medyan değerleri hazırla\nmedian_df &lt;- gpa_df %&gt;%\n  group_by(Grup) %&gt;%\n  summarize(medyan = median(cgpa, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(label = sprintf(\"%.2f\", medyan))\n\n# 5) Boxplot + jitter + medyan etiketleri\nggplot(gpa_df, aes(x = Grup, y = cgpa, fill = Grup)) +\n  geom_boxplot(outlier.shape = NA, alpha = 0.6) +\n  geom_jitter(width = 0.15, size = 1, alpha = 0.3, na.rm = TRUE) +\n  # Medyan etiketlerini beyaz zeminde, kutunun üstüne taşıyoruz\n  geom_label(\n    data = median_df,\n    aes(x = Grup, y = medyan, label = label),\n    nudge_y = 0.1,            # kutunun biraz üstüne\n    fill    = \"white\",        # okunurluk için\n    fontface = \"bold\",\n    size    = 4\n  ) +\n  coord_cartesian(\n    ylim = c(\n      min(gpa_df$cgpa, na.rm = TRUE),\n      max(gpa_df$cgpa, na.rm = TRUE) * 1.05\n    )\n  ) +\n  labs(\n    title = \"Mezunların CGPA Dağılımı\",\n    x     = NULL,\n    y     = \"CGPA\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    legend.position = \"none\",\n    plot.title      = element_text(hjust = 0.5, face = \"bold\")\n  )"
  }
]